// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trades.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>

namespace trading {

void protobuf_ShutdownFile_trades_2eproto() {
  delete Trade::default_instance_;
  delete GainLoss::default_instance_;
}

void protobuf_AddDesc_trades_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Trade::default_instance_ = new Trade();
  GainLoss::default_instance_ = new GainLoss();
  Trade::default_instance_->InitAsDefaultInstance();
  GainLoss::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trades_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trades_2eproto {
  StaticDescriptorInitializer_trades_2eproto() {
    protobuf_AddDesc_trades_2eproto();
  }
} static_descriptor_initializer_trades_2eproto_;

bool OrderType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string Trade::_default_date_;
const ::std::string Trade::_default_cusip_;
const ::std::string Trade::_default_security_;
const ::std::string Trade::_default_description_;
#ifndef _MSC_VER
const int Trade::kDateFieldNumber;
const int Trade::kOrderTypeFieldNumber;
const int Trade::kCusipFieldNumber;
const int Trade::kSecurityFieldNumber;
const int Trade::kDescriptionFieldNumber;
const int Trade::kQuantityFieldNumber;
const int Trade::kPriceFieldNumber;
const int Trade::kCommissionFieldNumber;
const int Trade::kNetFieldNumber;
const int Trade::kTimestampFieldNumber;
const int Trade::kTradeIdFieldNumber;
#endif  // !_MSC_VER

Trade::Trade() {
  SharedCtor();
}

void Trade::InitAsDefaultInstance() {
}

Trade::Trade(const Trade& from) {
  SharedCtor();
  MergeFrom(from);
}

void Trade::SharedCtor() {
  _cached_size_ = 0;
  date_ = const_cast< ::std::string*>(&_default_date_);
  ordertype_ = 0;
  cusip_ = const_cast< ::std::string*>(&_default_cusip_);
  security_ = const_cast< ::std::string*>(&_default_security_);
  description_ = const_cast< ::std::string*>(&_default_description_);
  quantity_ = 0;
  price_ = 0;
  commission_ = 0;
  net_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  tradeid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trade::~Trade() {
  SharedDtor();
}

void Trade::SharedDtor() {
  if (date_ != &_default_date_) {
    delete date_;
  }
  if (cusip_ != &_default_cusip_) {
    delete cusip_;
  }
  if (security_ != &_default_security_) {
    delete security_;
  }
  if (description_ != &_default_description_) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

const Trade& Trade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trades_2eproto();  return *default_instance_;
}

Trade* Trade::default_instance_ = NULL;

Trade* Trade::New() const {
  return new Trade;
}

void Trade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (date_ != &_default_date_) {
        date_->clear();
      }
    }
    ordertype_ = 0;
    if (_has_bit(2)) {
      if (cusip_ != &_default_cusip_) {
        cusip_->clear();
      }
    }
    if (_has_bit(3)) {
      if (security_ != &_default_security_) {
        security_->clear();
      }
    }
    if (_has_bit(4)) {
      if (description_ != &_default_description_) {
        description_->clear();
      }
    }
    quantity_ = 0;
    price_ = 0;
    commission_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    net_ = 0;
    timestamp_ = GOOGLE_ULONGLONG(0);
    tradeid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Trade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_date()));
        if (input->ExpectTag(16)) goto parse_orderType;
        break;
      }
      
      // required .trading.OrderType orderType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_orderType:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (trading::OrderType_IsValid(value)) {
          set_ordertype(static_cast< trading::OrderType >(value));
        }
        if (input->ExpectTag(26)) goto parse_cusip;
        break;
      }
      
      // optional string cusip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_cusip:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_cusip()));
        if (input->ExpectTag(34)) goto parse_security;
        break;
      }
      
      // required string security = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_security:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_security()));
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }
      
      // required string description = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_description:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_description()));
        if (input->ExpectTag(48)) goto parse_quantity;
        break;
      }
      
      // required int32 quantity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_quantity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &quantity_));
        _set_bit(5);
        if (input->ExpectTag(61)) goto parse_price;
        break;
      }
      
      // required float price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_price:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &price_));
        _set_bit(6);
        if (input->ExpectTag(69)) goto parse_commission;
        break;
      }
      
      // optional float commission = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_commission:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &commission_));
        _set_bit(7);
        if (input->ExpectTag(77)) goto parse_net;
        break;
      }
      
      // required float net = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_net:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &net_));
        _set_bit(8);
        if (input->ExpectTag(81)) goto parse_timestamp;
        break;
      }
      
      // required fixed64 timestamp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_timestamp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFixed64(
              input, &timestamp_));
        _set_bit(9);
        if (input->ExpectTag(89)) goto parse_tradeId;
        break;
      }
      
      // required fixed64 tradeId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_tradeId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFixed64(
              input, &tradeid_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string date = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->date(), output);
  }
  
  // required .trading.OrderType orderType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ordertype(), output);
  }
  
  // optional string cusip = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cusip(), output);
  }
  
  // required string security = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->security(), output);
  }
  
  // required string description = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->description(), output);
  }
  
  // required int32 quantity = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->quantity(), output);
  }
  
  // required float price = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->price(), output);
  }
  
  // optional float commission = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->commission(), output);
  }
  
  // required float net = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->net(), output);
  }
  
  // required fixed64 timestamp = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->timestamp(), output);
  }
  
  // required fixed64 tradeId = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->tradeid(), output);
  }
  
}

int Trade::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }
    
    // required .trading.OrderType orderType = 2;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
    }
    
    // optional string cusip = 3;
    if (has_cusip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cusip());
    }
    
    // required string security = 4;
    if (has_security()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security());
    }
    
    // required string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // required int32 quantity = 6;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }
    
    // required float price = 7;
    if (has_price()) {
      total_size += 1 + 4;
    }
    
    // optional float commission = 8;
    if (has_commission()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float net = 9;
    if (has_net()) {
      total_size += 1 + 4;
    }
    
    // required fixed64 timestamp = 10;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 tradeId = 11;
    if (has_tradeid()) {
      total_size += 1 + 8;
    }
    
  }
  _cached_size_ = total_size;
  return total_size;
}

void Trade::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Trade*>(&from));
}

void Trade::MergeFrom(const Trade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_date(from.date());
    }
    if (from._has_bit(1)) {
      set_ordertype(from.ordertype());
    }
    if (from._has_bit(2)) {
      set_cusip(from.cusip());
    }
    if (from._has_bit(3)) {
      set_security(from.security());
    }
    if (from._has_bit(4)) {
      set_description(from.description());
    }
    if (from._has_bit(5)) {
      set_quantity(from.quantity());
    }
    if (from._has_bit(6)) {
      set_price(from.price());
    }
    if (from._has_bit(7)) {
      set_commission(from.commission());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_net(from.net());
    }
    if (from._has_bit(9)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(10)) {
      set_tradeid(from.tradeid());
    }
  }
}

void Trade::CopyFrom(const Trade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trade::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000077b) != 0x0000077b) return false;
  
  return true;
}

void Trade::Swap(Trade* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(cusip_, other->cusip_);
    std::swap(security_, other->security_);
    std::swap(description_, other->description_);
    std::swap(quantity_, other->quantity_);
    std::swap(price_, other->price_);
    std::swap(commission_, other->commission_);
    std::swap(net_, other->net_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(tradeid_, other->tradeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Trade::GetTypeName() const {
  return "trading.Trade";
}


// ===================================================================

const ::std::string GainLoss::_default_symbol_;
const ::std::string GainLoss::_default_open_date_;
const ::std::string GainLoss::_default_closing_date_;
#ifndef _MSC_VER
const int GainLoss::kSymbolFieldNumber;
const int GainLoss::kQuantityFieldNumber;
const int GainLoss::kOpenDateFieldNumber;
const int GainLoss::kOpenPriceFieldNumber;
const int GainLoss::kOpenNetFieldNumber;
const int GainLoss::kOrderTypeFieldNumber;
const int GainLoss::kClosingDateFieldNumber;
const int GainLoss::kClosingPriceFieldNumber;
const int GainLoss::kClosingNetFieldNumber;
const int GainLoss::kGainLossFieldNumber;
const int GainLoss::kIdFieldNumber;
#endif  // !_MSC_VER

GainLoss::GainLoss() {
  SharedCtor();
}

void GainLoss::InitAsDefaultInstance() {
}

GainLoss::GainLoss(const GainLoss& from) {
  SharedCtor();
  MergeFrom(from);
}

void GainLoss::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&_default_symbol_);
  quantity_ = 0;
  open_date_ = const_cast< ::std::string*>(&_default_open_date_);
  open_price_ = 0;
  open_net_ = 0;
  order_type_ = 0;
  closing_date_ = const_cast< ::std::string*>(&_default_closing_date_);
  closing_price_ = 0;
  closing_net_ = 0;
  gain_loss_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GainLoss::~GainLoss() {
  SharedDtor();
}

void GainLoss::SharedDtor() {
  if (symbol_ != &_default_symbol_) {
    delete symbol_;
  }
  if (open_date_ != &_default_open_date_) {
    delete open_date_;
  }
  if (closing_date_ != &_default_closing_date_) {
    delete closing_date_;
  }
  if (this != default_instance_) {
  }
}

const GainLoss& GainLoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trades_2eproto();  return *default_instance_;
}

GainLoss* GainLoss::default_instance_ = NULL;

GainLoss* GainLoss::New() const {
  return new GainLoss;
}

void GainLoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (symbol_ != &_default_symbol_) {
        symbol_->clear();
      }
    }
    quantity_ = 0;
    if (_has_bit(2)) {
      if (open_date_ != &_default_open_date_) {
        open_date_->clear();
      }
    }
    open_price_ = 0;
    open_net_ = 0;
    order_type_ = 0;
    if (_has_bit(6)) {
      if (closing_date_ != &_default_closing_date_) {
        closing_date_->clear();
      }
    }
    closing_price_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    closing_net_ = 0;
    gain_loss_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GainLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_symbol()));
        if (input->ExpectTag(16)) goto parse_quantity;
        break;
      }
      
      // required int32 quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_quantity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &quantity_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_open_date;
        break;
      }
      
      // required string open_date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_open_date:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_open_date()));
        if (input->ExpectTag(37)) goto parse_open_price;
        break;
      }
      
      // required float open_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_open_price:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &open_price_));
        _set_bit(3);
        if (input->ExpectTag(45)) goto parse_open_net;
        break;
      }
      
      // required float open_net = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_open_net:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &open_net_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_order_type;
        break;
      }
      
      // required .trading.OrderType order_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_order_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (trading::OrderType_IsValid(value)) {
          set_order_type(static_cast< trading::OrderType >(value));
        }
        if (input->ExpectTag(58)) goto parse_closing_date;
        break;
      }
      
      // required string closing_date = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_closing_date:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_closing_date()));
        if (input->ExpectTag(69)) goto parse_closing_price;
        break;
      }
      
      // required float closing_price = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_closing_price:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &closing_price_));
        _set_bit(7);
        if (input->ExpectTag(77)) goto parse_closing_net;
        break;
      }
      
      // required float closing_net = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_closing_net:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &closing_net_));
        _set_bit(8);
        if (input->ExpectTag(85)) goto parse_gain_loss;
        break;
      }
      
      // required float gain_loss = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_gain_loss:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &gain_loss_));
        _set_bit(9);
        if (input->ExpectTag(89)) goto parse_id;
        break;
      }
      
      // required fixed64 id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFixed64(
              input, &id_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GainLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }
  
  // required int32 quantity = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity(), output);
  }
  
  // required string open_date = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->open_date(), output);
  }
  
  // required float open_price = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->open_price(), output);
  }
  
  // required float open_net = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->open_net(), output);
  }
  
  // required .trading.OrderType order_type = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->order_type(), output);
  }
  
  // required string closing_date = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->closing_date(), output);
  }
  
  // required float closing_price = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->closing_price(), output);
  }
  
  // required float closing_net = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->closing_net(), output);
  }
  
  // required float gain_loss = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->gain_loss(), output);
  }
  
  // required fixed64 id = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->id(), output);
  }
  
}

int GainLoss::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }
    
    // required int32 quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }
    
    // required string open_date = 3;
    if (has_open_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_date());
    }
    
    // required float open_price = 4;
    if (has_open_price()) {
      total_size += 1 + 4;
    }
    
    // required float open_net = 5;
    if (has_open_net()) {
      total_size += 1 + 4;
    }
    
    // required .trading.OrderType order_type = 6;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_type());
    }
    
    // required string closing_date = 7;
    if (has_closing_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->closing_date());
    }
    
    // required float closing_price = 8;
    if (has_closing_price()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float closing_net = 9;
    if (has_closing_net()) {
      total_size += 1 + 4;
    }
    
    // required float gain_loss = 10;
    if (has_gain_loss()) {
      total_size += 1 + 4;
    }
    
    // required fixed64 id = 11;
    if (has_id()) {
      total_size += 1 + 8;
    }
    
  }
  _cached_size_ = total_size;
  return total_size;
}

void GainLoss::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GainLoss*>(&from));
}

void GainLoss::MergeFrom(const GainLoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_symbol(from.symbol());
    }
    if (from._has_bit(1)) {
      set_quantity(from.quantity());
    }
    if (from._has_bit(2)) {
      set_open_date(from.open_date());
    }
    if (from._has_bit(3)) {
      set_open_price(from.open_price());
    }
    if (from._has_bit(4)) {
      set_open_net(from.open_net());
    }
    if (from._has_bit(5)) {
      set_order_type(from.order_type());
    }
    if (from._has_bit(6)) {
      set_closing_date(from.closing_date());
    }
    if (from._has_bit(7)) {
      set_closing_price(from.closing_price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_closing_net(from.closing_net());
    }
    if (from._has_bit(9)) {
      set_gain_loss(from.gain_loss());
    }
    if (from._has_bit(10)) {
      set_id(from.id());
    }
  }
}

void GainLoss::CopyFrom(const GainLoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainLoss::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void GainLoss::Swap(GainLoss* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(quantity_, other->quantity_);
    std::swap(open_date_, other->open_date_);
    std::swap(open_price_, other->open_price_);
    std::swap(open_net_, other->open_net_);
    std::swap(order_type_, other->order_type_);
    std::swap(closing_date_, other->closing_date_);
    std::swap(closing_price_, other->closing_price_);
    std::swap(closing_net_, other->closing_net_);
    std::swap(gain_loss_, other->gain_loss_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GainLoss::GetTypeName() const {
  return "trading.GainLoss";
}


}  // namespace trading
