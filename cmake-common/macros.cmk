# Useful Macros

set(LAB616 ${PROJECT_SOURCE_DIR}/..)

# Build static libraries that are required but not part of the project.
# This includes common api libraries such as gtest and the TWS api.
# Note that the IF is evaluated only when cmake is invoked.  Therefore,
# in order to take into account of the library, do make install and then
# rerun cmake.
macro(ext_library target sources)
  if(EXISTS ${BUILD_DIR}/lib/lib${target}.a)
    add_library(${target} STATIC IMPORTED)
    set_property(TARGET ${target} 
      PROPERTY IMPORTED_LOCATION ${BUILD_DIR}/lib/lib${target}.a)
  else(EXISTS ${BUILD_DIR}/lib/lib${target}.a)
    add_library(${ARGV})
    # Install the library
    install(TARGETS ${target} DESTINATION ${BUILD_DIR}/lib)
  endif(EXISTS ${BUILD_DIR}/lib/lib${target}.a)
endmacro(ext_library)

# Building a library
# Given a target of FOO, an executable target FOO is defined for
# building with sources from list FOO_srcs and links with library
# FOO_libs.  The output libFOO.a is then copied to the build dir.
macro(cpp_library target)
  include_directories(${target} ${${target}_incs})
  link_directories(${BUILD_DIR}/lib)
  add_library(${target} ${${target}_srcs})
  add_dependencies(${target} init)
  target_link_libraries(${target} ${${target}_libs})
  add_custom_target(${target}_lint 
    ${CPPLINT} ${${target}}_incs ${${target}_srcs})
  install(TARGETS ${target} DESTINATION ${BUILD_DIR}/lib)
endmacro(cpp_library)

# Building an executable
# Given a target of FOO, an executable target FOO is defined for
# building with sources from list FOO_srcs and links with library
# FOO_libs.  The output FOO executable is then copied to the build dir.
macro(cpp_executable target)
  include_directories(${target} ${${target}_incs})
  link_directories(${BUILD_DIR}/lib)
  add_executable(${target} ${${target}_srcs})
  add_dependencies(${target} init)
  target_link_libraries(${target} ${${target}_libs})
  add_custom_target(${target}_lint 
    ${CPPLINT} ${${target}}_incs ${${target}_srcs})
  set_target_properties(${target} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${BUILD_DIR}")
  install(TARGETS ${target} DESTINATION ${BUILD_DIR}/bin)
endmacro(cpp_executable)

# Running cpplint
# Given a target of FOO, a FOO_lint target is automatically generated.
macro(runlint targets)
  foreach(target ${targets})
    add_custom_target(${target}_lint 
      ${CPPLINT} ${${target}}_incs ${${target}_srcs})
  endforeach(target)
endmacro(runlint)

