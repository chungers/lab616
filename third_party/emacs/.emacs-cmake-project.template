;;; Project-specific template for Emacs.
;;; The variables here are to be filled in by CMake.
;;;
;;;
;;; //@PROJECT_NAME@/project.el

;;; load this with M-x 'load-file'

; Default working directory
(setq default-directory "@PROJECT_SOURCE_DIR@/")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Basic colors, etc.
(line-number-mode 1)
(column-number-mode 1)
(global-hl-line-mode 1) ;; highlights current line
(set-background-color "grey12")
(set-foreground-color "LightYellow2")
(set-cursor-color "DarkRed")
;; Sets the colors for all frames.
(setq default-frame-alist
      (append default-frame-alist
              '((foreground-color . "LightYellow2")
                (background-color . "grey12")
                (cursor-color . "DarkRed")
                )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Git-Emacs
(add-to-list 'load-path
 "@PROJECT_SOURCE_DIR@/../third_party/emacs/git-emacs")
(provide 'git-emacs)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Google C++ styles
(load-file
 "@PROJECT_SOURCE_DIR@/../third_party/emacs/google-c-style.el")
(require 'google-c-style)
(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c-mode-common-hook 'google-make-newline-indent)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Lua Mode
(autoload 'lua-mode
 "@PROJECT_SOURCE_DIR@/../third_party/emacs/lua-mode/lua-mode.el" t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CMake Mode
(autoload 'cmake-mode
 "@PROJECT_SOURCE_DIR@/../third_party/emacs/cmake-mode.el" t)


(setq auto-mode-alist
        (append
	    '(("CMakeLists\\.txt\\'" . cmake-mode))
	    '(("CMakeLists\\.macros\\'" . cmake-mode))
	    '(("\\.cmake\\'" . cmake-mode))
	    '(("\\.cmk\\'" . cmake-mode))
	    '(("\\.proto\\'" . c++-mode))
	    '(("\\.lua$" . lua-mode))
	    auto-mode-alist))

(add-hook 'lua-mode-hook 'turn-on-font-lock)
(add-hook 'lua-mode-hook 'hs-minor-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CDET C++ Project
(load-file
 "@PROJECT_SOURCE_DIR@/../third_party/emacs/cedet/common/cedet.el")
(require 'ede)
(require 'semantic-gcc)
(require 'semanticdb)
(require 'semantic-decorate-include)

(global-ede-mode 1)                       ; Enable Project management system
(global-srecode-minor-mode 1)             ; Template insertion menu
(global-semanticdb-minor-mode 1)

(semantic-load-enable-code-helpers)       ; Prototype help and smart completion
(semantic-load-enable-gaudy-code-helpers) ;

(defun my-cedet-hook ()
  ;; Code completion - symbol.
  (local-set-key [(control return)] 'semantic-ia-complete-symbol)

  ;; Code completion - member functions.
  (local-set-key "." 'semantic-complete-self-insert)
  (local-set-key ">" 'semantic-complete-self-insert)

  ;; C-c 'space': Displays menu for code completion.
  (local-set-key "\C-c " 'semantic-ia-complete-symbol-menu)

  ;; C-c j: Jumps to defintion of symbol under cursor.
  (local-set-key "\C-cj" 'semantic-ia-fast-jump)

  ;; C-c b: Jumps back after C-c j
  (local-set-key "\C-cb" 'semantic-mrub-switch-tag)

  ;; C-c v: Visits the declaration in header file (cursor on #define)
  (local-set-key "\C-cv" 'semantic-decoration-include-visit)

  ;; C-c p: Toggles between function declaration and actual implementation.
  (local-set-key "\C-ci" 'semantic-analyze-proto-impl-toggle)

  ;; C-c u: Finds all usage of symbol under cursor.
  (local-set-key "\C-cu" 'semantic-symref-symbol)

  ;; C-c d: Shows the documentation / function prototype of tag under cursor
  (local-set-key "\C-cd" 'semantic-ia-show-doc)

  ;;
  (local-set-key "\C-c>" 'semantic-complete-analyze-inline)
)
(add-hook 'c-mode-common-hook 'my-cedet-hook)

(ede-cpp-root-project
 "@PROJECT_NAME@"
 :file "@PROJECT_SOURCE_DIR@/CMakeLists.txt"
 :include-path '("/src"
		 "/test"
		 "/_genfiles"
		 "/_build/third_party/include"
		 @EMACS_PROJECT_INCLUDE_PATHS@
		 )
 :system-include-path '(@EMACS_PROJECT_SYS_INCLUDE_PATHS@)
 )
