--- source.c	2010-10-24 21:12:50.000000000 +0800
+++ source.c89.c	2010-10-24 21:13:20.000000000 +0800
@@ -114,11 +114,13 @@
 	)
 {
 	pgm_return_val_if_fail (NULL != sock, FALSE);
+	{
 	const bool status = pgm_txw_retransmit_push (sock->window,
 						     nak_tg_sqn | sock->rs_proactive_h,
 						     TRUE /* is_parity */,
 						     sock->tg_sqn_shift);
 	return status;
+	}
 }
 
 /* a deferred request for RDATA, now processing in the timer thread, we check the transmit
@@ -227,6 +229,7 @@
 	pgm_assert (NULL != skb);
 	pgm_assert (NULL != opt_pgmcc_feedback);
 
+	{
 	const uint32_t opt_tstamp = ntohl (opt_pgmcc_feedback->opt_tstamp);
 	const uint16_t opt_loss_rate = ntohs (opt_pgmcc_feedback->opt_loss_rate);
 
@@ -256,6 +259,7 @@
 	}
 
 	return FALSE;
+	}
 }
 
 /* NAK requesting RDATA transmission for a sending sock, only valid if
@@ -290,6 +294,7 @@
 	pgm_debug ("pgm_on_nak (sock:%p skb:%p)",
 		(const void*)sock, (const void*)skb);
 
+	{
 	const bool is_parity = skb->pgm_header->pgm_options & PGM_OPT_PARITY;
 	if (is_parity) {
 		sock->cumulative_stats[PGM_PC_SOURCE_PARITY_NAKS_RECEIVED]++;
@@ -370,16 +375,19 @@
 	}
 
 /* nak list numbers */
-	if (PGM_UNLIKELY(nak_list_len > 62)) {
+	if (PGM_UNLIKELY(nak_list_len > 63)) {
 		pgm_trace (PGM_LOG_ROLE_NETWORK,_("Malformed NAK rejected on sequence list overrun, %d rported NAKs."), nak_list_len);
 		return FALSE;
 	}
-		
-	for (uint_fast8_t i = 0; i < nak_list_len; i++)
+
+	{
+	uint_fast8_t i;
+	for (i = 0; i < nak_list_len; i++)
 	{
 		sqn_list.sqn[sqn_list.len++] = ntohl (*nak_list);
 		nak_list++;
 	}
+	}
 
 /* send NAK confirm packet immediately, then defer to timer thread for a.s.a.p
  * delivery of the actual RDATA packets.  blocking send for NCF is ignored as RDATA
@@ -391,13 +399,17 @@
 		send_ncf (sock, (struct sockaddr*)&nak_src_nla, (struct sockaddr*)&nak_grp_nla, sqn_list.sqn[0], is_parity);
 
 /* queue retransmit requests */
-	for (uint_fast8_t i = 0; i < sqn_list.len; i++) {
+	{
+	uint_fast8_t i;
+	for (i = 0; i < sqn_list.len; i++) {
 		const bool push_status = pgm_txw_retransmit_push (sock->window, sqn_list.sqn[i], is_parity, sock->tg_sqn_shift);
 		if (PGM_UNLIKELY(!push_status)) {
 			pgm_trace (PGM_LOG_ROLE_TX_WINDOW,_("Failed to push retransmit request for #%" PRIu32), sqn_list.sqn[i]);
 		}
 	}
+	}
 	return TRUE;
+	}
 }
 
 /* Null-NAK, or N-NAK propogated by a DLR for hand waving excitement
@@ -465,6 +477,7 @@
 			return FALSE;
 		}
 /* TODO: check for > 16 options & past packet end */
+		{
 		const struct pgm_opt_header* opt_header = (const struct pgm_opt_header*)opt_len;
 		do {
 			opt_header = (const struct pgm_opt_header*)((const char*)opt_header + opt_header->opt_length);
@@ -473,6 +486,7 @@
 				break;
 			}
 		} while (!(opt_header->opt_type & PGM_OPT_END));
+		}
 	}
 
 	sock->cumulative_stats[PGM_PC_SOURCE_SELECTIVE_NNAKS_RECEIVED] += 1 + nnak_list_len;
@@ -548,6 +562,7 @@
 	sock->next_crqst = 0;
 
 /* count new ACK sequences */
+	{
 	const uint32_t ack_rx_max = ntohl (ack->ack_rx_max);
 	const int32_t delta = ack_rx_max - sock->ack_rx_max;
 /* ignore older ACKs when multiple active ACKers */
@@ -564,6 +579,7 @@
 	if (0 == new_acks)
 		return TRUE;
 
+	{
 	const bool is_congestion_limited = (sock->tokens < pgm_fp8 (1));
 
 /* after loss detection cancel any further manipulation of the window
@@ -575,14 +591,17 @@
 		{
 			pgm_trace (PGM_LOG_ROLE_CONGESTION_CONTROL,_("PGMCC window token manipulation suspended due to congestion (T:%u W:%u)"),
 				   pgm_fp8tou (sock->tokens), pgm_fp8tou (sock->cwnd_size));
+			{
 			const uint_fast32_t token_inc = pgm_fp8mul (pgm_fp8 (new_acks), pgm_fp8 (1) + pgm_fp8div (pgm_fp8 (1), sock->cwnd_size));
 			sock->tokens = MIN( sock->tokens + token_inc, sock->cwnd_size );
 			goto notify_tx;
+			}
 		}
 		sock->is_congested = FALSE;
 	}
 
 /* count outstanding lost sequences */
+	{
 	const unsigned total_lost = _pgm_popcount (~sock->ack_bitmap);
 
 /* no detected data loss at ACKer, increase congestion window size */
@@ -603,6 +622,7 @@
 			sock->cwnd_size += d;
 		}
 
+		{
 		const uint_fast32_t iw = pgm_fp8div (pgm_fp8 (1), sock->cwnd_size);
 
 /* linear window increase */
@@ -611,6 +631,7 @@
 		sock->tokens	 = MIN( sock->tokens + token_inc, sock->cwnd_size );
 //		pgm_trace (PGM_LOG_ROLE_CONGESTION_CONTROL,_("PGMCC++ (T:%u W:%u)"),
 //			   pgm_fp8tou (sock->tokens), pgm_fp8tou (sock->cwnd_size));
+		}
 	}
 	else
 	{
@@ -645,6 +666,9 @@
 		pgm_notify_send (&sock->ack_notify);
 	}
 	return TRUE;
+	}
+	}
+	}
 }
 
 /* ambient/heartbeat SPM's
@@ -666,7 +690,7 @@
 	struct pgm_spm	  *spm;
 	struct pgm_spm6	  *spm6;
 	ssize_t		   sent;
-	
+
 /* pre-conditions */
 	pgm_assert (NULL != sock);
 	pgm_assert (NULL != sock->window);
@@ -843,7 +867,7 @@
 	struct pgm_nak	  *ncf;
 	struct pgm_nak6	  *ncf6;
 	ssize_t		   sent;
-	
+
 /* pre-conditions */
 	pgm_assert (NULL != sock);
 	pgm_assert (NULL != nak_src_nla);
@@ -851,6 +875,7 @@
 	pgm_assert (nak_src_nla->sa_family == nak_grp_nla->sa_family);
 
 #ifdef SOURCE_DEBUG
+	{
 	char saddr[INET6_ADDRSTRLEN], gaddr[INET6_ADDRSTRLEN];
 	pgm_sockaddr_ntop (nak_src_nla, saddr, sizeof(saddr));
 	pgm_sockaddr_ntop (nak_grp_nla, gaddr, sizeof(gaddr));
@@ -861,6 +886,7 @@
 		sequence,
 		is_parity ? "TRUE": "FALSE"
 		);
+	}
 #endif
 
 	tpdu_length = sizeof(struct pgm_header);
@@ -901,7 +927,7 @@
 	if (sent < 0 && PGM_LIKELY(PGM_SOCK_EAGAIN == pgm_get_last_sock_error()))
 		return FALSE;
 /* fall through silently on other errors */
-			
+
 	pgm_atomic_add32 (&sock->cumulative_stats[PGM_PC_SOURCE_BYTES_SENT], tpdu_length);
 	return TRUE;
 }
@@ -940,16 +966,20 @@
 	pgm_assert (nak_src_nla->sa_family == nak_grp_nla->sa_family);
 
 #ifdef SOURCE_DEBUG
+	{
 	char saddr[INET6_ADDRSTRLEN], gaddr[INET6_ADDRSTRLEN];
 	char list[1024];
 	pgm_sockaddr_ntop (nak_src_nla, saddr, sizeof(saddr));
 	pgm_sockaddr_ntop (nak_grp_nla, gaddr, sizeof(gaddr));
 	sprintf (list, "%" PRIu32, sqn_list->sqn[0]);
-	for (uint_fast8_t i = 1; i < sqn_list->len; i++) {
+	{
+	uint_fast8_t i;
+	for (i = 1; i < sqn_list->len; i++) {
 		char sequence[ 2 + strlen("4294967295") ];
 		sprintf (sequence, " %" PRIu32, sqn_list->sqn[i]);
 		strcat (list, sequence);
 	}
+	}
 	pgm_debug ("send_ncf_list (sock:%p nak-src-nla:%s nak-grp-nla:%s sqn-list:[%s] is-parity:%s)",
 		(void*)sock,
 		saddr,
@@ -957,6 +987,7 @@
 		list,
 		is_parity ? "TRUE": "FALSE"
 		);
+	}
 #endif
 
 	tpdu_length = sizeof(struct pgm_header) +
@@ -999,8 +1030,11 @@
 	opt_nak_list = (struct pgm_opt_nak_list*)(opt_header + 1);
 	opt_nak_list->opt_reserved = 0;
 /* to network-order */
-	for (uint_fast8_t i = 1; i < sqn_list->len; i++)
+	{
+	uint_fast8_t i;
+	for (i = 1; i < sqn_list->len; i++)
 		opt_nak_list->opt_sqn[i-1] = htonl (sqn_list->sqn[i]);
+	}
 
         header->pgm_checksum    = 0;
         header->pgm_checksum	= pgm_csum_fold (pgm_csum_partial (buf, tpdu_length, 0));
@@ -1015,7 +1049,7 @@
 	if (sent < 0 && PGM_LIKELY(PGM_SOCK_EAGAIN == pgm_get_last_sock_error()))
 		return FALSE;
 /* fall through silently on other errors */
-	
+
 	pgm_atomic_add32 (&sock->cumulative_stats[PGM_PC_SOURCE_BYTES_SENT], tpdu_length);
 	return TRUE;
 }
@@ -1031,6 +1065,7 @@
 	)
 {
 	pgm_mutex_lock (&sock->timer_mutex);
+	{
 	const pgm_time_t next_poll = sock->next_poll;
 	const pgm_time_t spm_heartbeat_interval = sock->spm_heartbeat_interval[ sock->spm_heartbeat_state = 1 ];
 	sock->next_heartbeat_spm = now + spm_heartbeat_interval;
@@ -1042,6 +1077,7 @@
 			sock->is_pending_read = TRUE;
 		}
 	}
+	}
 	pgm_mutex_unlock (&sock->timer_mutex);
 }
 
@@ -1081,6 +1117,7 @@
 	pgm_debug ("send_odata (sock:%p skb:%p bytes-written:%p)",
 		(void*)sock, (void*)skb, (void*)bytes_written);
 
+	{
 	const uint16_t    tsdu_length  = skb->len;
 	const sa_family_t pgmcc_family = sock->use_pgmcc ? sock->family : 0;
 	const size_t      tpdu_length  = tsdu_length + pgm_pkt_offset (FALSE, pgmcc_family);
@@ -1142,6 +1179,7 @@
 		else
 			data = (char*)pgmcc_data  + sizeof(struct pgm_opt_pgmcc_data);
 	}
+	{
 	const size_t   pgm_header_len		= (char*)data - (char*)STATE(skb)->pgm_header;
 	const uint32_t unfolded_header		= pgm_csum_partial (STATE(skb)->pgm_header, pgm_header_len, 0);
 	STATE(unfolded_odata)			= pgm_csum_partial (data, tsdu_length, 0);
@@ -1218,6 +1256,8 @@
 	if (bytes_written)
 		*bytes_written = tsdu_length;
 	return PGM_IO_STATUS_NORMAL;
+	}
+	}
 }
 
 /* send one PGM original data packet, callee owned memory.
@@ -1247,6 +1287,7 @@
 	pgm_debug ("send_odata_copy (sock:%p tsdu:%p tsdu_length:%u bytes-written:%p)",
 		(void*)sock, tsdu, tsdu_length, (void*)bytes_written);
 
+	{
 	const sa_family_t pgmcc_family = sock->use_pgmcc ? sock->family : 0;
 	const size_t      tpdu_length  = tsdu_length + pgm_pkt_offset (FALSE, pgmcc_family);
 
@@ -1307,6 +1348,7 @@
 		pgm_sockaddr_to_nla ((struct sockaddr*)&sock->acker_nla, (char*)&pgmcc_data->opt_nla_afi);
 		data = (char*)opt_header + opt_header->opt_length;
 	}
+	{
 	const size_t   pgm_header_len		= (char*)data - (char*)STATE(skb)->pgm_header;
 	const uint32_t unfolded_header		= pgm_csum_partial (STATE(skb)->pgm_header, pgm_header_len, 0);
 	STATE(unfolded_odata)			= pgm_csum_partial_copy (tsdu, data, tsdu_length, 0);
@@ -1381,6 +1423,8 @@
 	if (bytes_written)
 		*bytes_written = tsdu_length;
 	return PGM_IO_STATUS_NORMAL;
+	}
+	}
 }
 
 /* send one PGM original data packet, callee owned scatter/gather io vector
@@ -1423,7 +1467,9 @@
 		goto retry_send;
 
 	STATE(tsdu_length) = 0;
-	for (unsigned i = 0; i < count; i++)
+	{
+	unsigned i;
+	for (i = 0; i < count; i++)
 	{
 #ifdef TRANSPORT_DEBUG
 		if (PGM_LIKELY(vector[i].iov_len)) {
@@ -1432,13 +1478,16 @@
 #endif
 		STATE(tsdu_length) += vector[i].iov_len;
 	}
+	}
 	pgm_return_val_if_fail (STATE(tsdu_length) <= sock->max_tsdu, PGM_IO_STATUS_ERROR);
 
 	STATE(skb) = pgm_alloc_skb (sock->max_tpdu);
 	STATE(skb)->sock = sock;
 	STATE(skb)->tstamp = pgm_time_update_now();
+	{
 	const sa_family_t pgmcc_family = sock->use_pgmcc ? sock->family : 0;
 	pgm_skb_reserve (STATE(skb), pgm_pkt_offset (FALSE, pgmcc_family));
+	}
 	pgm_skb_put (STATE(skb), STATE(tsdu_length));
 
 	STATE(skb)->pgm_header  = (struct pgm_header*)STATE(skb)->data;
@@ -1455,6 +1504,7 @@
 	STATE(skb)->pgm_data->data_trail	= htonl (pgm_txw_trail(sock->window));
 
 	STATE(skb)->pgm_header->pgm_checksum	= 0;
+	{
 	const size_t   pgm_header_len		= (char*)(STATE(skb)->pgm_data + 1) - (char*)STATE(skb)->pgm_header;
 	const uint32_t unfolded_header		= pgm_csum_partial (STATE(skb)->pgm_header, pgm_header_len, 0);
 
@@ -1463,13 +1513,19 @@
 	STATE(unfolded_odata)	= pgm_csum_partial_copy ((const char*)vector[0].iov_base, dst, (uint16_t)vector[0].iov_len, 0);
 
 /* iterate over one or more vector elements to perform scatter/gather checksum & copy */
-	for (unsigned i = 1; i < count; i++) {
+	{
+	unsigned i;
+	for (i = 1; i < count; i++) {
 		dst += vector[i-1].iov_len;
+		{
 		const uint32_t unfolded_element = pgm_csum_partial_copy ((const char*)vector[i].iov_base, dst, (uint16_t)vector[i].iov_len, 0);
 		STATE(unfolded_odata) = pgm_csum_block_add (STATE(unfolded_odata), unfolded_element, (uint16_t)vector[i-1].iov_len);
+		}
+	}
 	}
 
 	STATE(skb)->pgm_header->pgm_checksum	= pgm_csum_fold (pgm_csum_block_add (unfolded_header, STATE(unfolded_odata), pgm_header_len));
+	}
 
 /* add to transmit window, skb::data set to payload */
 	pgm_spinlock_lock (&sock->txw_spinlock);
@@ -1552,6 +1608,7 @@
 	pgm_assert (NULL != sock);
 	pgm_assert (NULL != apdu);
 
+	{
 	const sa_family_t pgmcc_family = sock->use_pgmcc ? sock->family : 0;
 
 /* continue if blocked mid-apdu */
@@ -1635,10 +1692,12 @@
 
 /* TODO: the assembly checksum & copy routine is faster than memcpy & pgm_cksum on >= opteron hardware */
 		STATE(skb)->pgm_header->pgm_checksum	= 0;
+		{
 		const size_t   pgm_header_len		= (char*)(STATE(skb)->pgm_opt_fragment + 1) - (char*)STATE(skb)->pgm_header;
 		const uint32_t unfolded_header		= pgm_csum_partial (STATE(skb)->pgm_header, pgm_header_len, 0);
 		STATE(unfolded_odata)			= pgm_csum_partial_copy ((const char*)apdu + STATE(data_bytes_offset), STATE(skb)->pgm_opt_fragment + 1, STATE(tsdu_length), 0);
 		STATE(skb)->pgm_header->pgm_checksum	= pgm_csum_fold (pgm_csum_block_add (unfolded_header, STATE(unfolded_odata), pgm_header_len));
+		}
 
 /* add to transmit window, skb::data set to payload */
 		pgm_spinlock_lock (&sock->txw_spinlock);
@@ -1710,6 +1769,7 @@
 	if (sock->use_pgmcc)
 		pgm_notify_clear (&sock->ack_notify);
 	return PGM_IO_STATUS_WOULD_BLOCK;
+	}
 }
 
 /* Send one APDU, whether it fits within one TPDU or more.
@@ -1727,7 +1787,7 @@
 	)
 {
 	pgm_debug ("pgm_send (sock:%p apdu:%p apdu-length:%" PRIzu " bytes-written:%p)",
-		(void*)sock, apdu, apdu_length, (void*)bytes_written);
+		(void*)sock, apdu, (unsigned long)apdu_length, (void*)bytes_written);
 
 /* parameters */
 	pgm_return_val_if_fail (NULL != sock, PGM_IO_STATUS_ERROR);
@@ -1830,6 +1890,7 @@
 		return status;
 	}
 
+	{
 	const sa_family_t pgmcc_family = sock->use_pgmcc ? sock->family : 0;
 
 /* continue if blocked mid-apdu */
@@ -1851,7 +1912,9 @@
 
 /* calculate (total) APDU length */
 	STATE(apdu_length)	= 0;
-	for (unsigned i = 0; i < count; i++)
+	{
+	unsigned i;
+	for (i = 0; i < count; i++)
 	{
 #ifdef TRANSPORT_DEBUG
 		if (PGM_LIKELY(vector[i].iov_len)) {
@@ -1867,6 +1930,7 @@
 		}
 		STATE(apdu_length) += vector[i].iov_len;
 	}
+	}
 
 /* pass on non-fragment calls */
 	if (is_one_apdu) {
@@ -2005,6 +2069,7 @@
 
 /* checksum & copy */
 		STATE(skb)->pgm_header->pgm_checksum	= 0;
+		{
 		const size_t   pgm_header_len		= (char*)(STATE(skb)->pgm_opt_fragment + 1) - (char*)STATE(skb)->pgm_header;
 		const uint32_t unfolded_header		= pgm_csum_partial (STATE(skb)->pgm_header, pgm_header_len, 0);
 
@@ -2042,11 +2107,14 @@
 			dst	       += copy_length;
 			src_length	= vector[STATE(vector_index)].iov_len - STATE(vector_offset);
 			copy_length	= MIN( STATE(tsdu_length) - dst_length, src_length );
+			{
 			const uint32_t unfolded_element = pgm_csum_partial_copy (src, dst, copy_length, 0);
 			STATE(unfolded_odata) = pgm_csum_block_add (STATE(unfolded_odata), unfolded_element, dst_length);
+			}
 		}
 
 		STATE(skb)->pgm_header->pgm_checksum = pgm_csum_fold (pgm_csum_block_add (unfolded_header, STATE(unfolded_odata), pgm_header_len));
+		}
 
 /* add to transmit window, skb::data set to payload */
 		pgm_spinlock_lock (&sock->txw_spinlock);
@@ -2093,6 +2161,8 @@
 		}
 
 	} while ( STATE(data_bytes_offset)  < STATE(apdu_length) );
+	}
+
 	pgm_assert( STATE(data_bytes_offset) == STATE(apdu_length) );
 
 	sock->is_apdu_eagain = FALSE;
@@ -2185,6 +2255,7 @@
 		return status;
 	}
 
+	{
 	const sa_family_t pgmcc_family = sock->use_pgmcc ? sock->family : 0;
 
 /* continue if blocked mid-apdu */
@@ -2196,8 +2267,11 @@
 	{
 		size_t total_tpdu_length = 0;
 
-		for (unsigned i = 0; i < count; i++)
+		{
+		unsigned i;
+		for (i = 0; i < count; i++)
 			total_tpdu_length += sock->iphdr_len + pgm_pkt_offset (is_one_apdu, pgmcc_family) + vector[i]->len;
+		}
 
 /* calculation includes one iphdr length already */
 		if (!pgm_rate_check (&sock->rate_control,
@@ -2211,12 +2285,16 @@
 		}
 		STATE(is_rate_limited) = TRUE;
 	}
+	}
 
 	if (is_one_apdu)
 	{
 		STATE(apdu_length)	= 0;
 		STATE(first_sqn)	= pgm_txw_next_lead(sock->window);
-		for (unsigned i = 0; i < count; i++)
+
+		{
+		unsigned i;
+		for (i = 0; i < count; i++)
 		{
 			if (PGM_UNLIKELY(vector[i]->len > sock->max_tsdu_fragment)) {
 				pgm_mutex_unlock (&sock->source_mutex);
@@ -2225,6 +2303,8 @@
 			}
 			STATE(apdu_length) += vector[i]->len;
 		}
+		}
+
 		if (PGM_UNLIKELY(STATE(apdu_length) > sock->max_apdu)) {
 			pgm_mutex_unlock (&sock->source_mutex);
 			pgm_rwlock_reader_unlock (&sock->lock);
@@ -2289,10 +2369,12 @@
 /* TODO: the assembly checksum & copy routine is faster than memcpy & pgm_cksum on >= opteron hardware */
 		STATE(skb)->pgm_header->pgm_checksum	= 0;
 		pgm_assert ((char*)STATE(skb)->data > (char*)STATE(skb)->pgm_header);
+		{
 		const size_t header_length		= (char*)STATE(skb)->data - (char*)STATE(skb)->pgm_header;
 		const uint32_t unfolded_header		= pgm_csum_partial (STATE(skb)->pgm_header, header_length, 0);
 		STATE(unfolded_odata)			= pgm_csum_partial ((char*)STATE(skb)->data, STATE(tsdu_length), 0);
 		STATE(skb)->pgm_header->pgm_checksum	= pgm_csum_fold (pgm_csum_block_add (unfolded_header, STATE(unfolded_odata), header_length));
+		}
 
 /* add to transmit window, skb::data set to payload */
 		pgm_spinlock_lock (&sock->txw_spinlock);
@@ -2411,10 +2493,12 @@
         rdata->data_trail		= htonl (pgm_txw_trail(sock->window));
 
         header->pgm_checksum		= 0;
+	{
 	const size_t header_length	= tpdu_length - ntohs(header->pgm_tsdu_length);
 	const uint32_t unfolded_header	= pgm_csum_partial (header, header_length, 0);
 	const uint32_t unfolded_odata	= pgm_txw_get_unfolded_checksum (skb);
 	header->pgm_checksum		= pgm_csum_fold (pgm_csum_block_add (unfolded_header, unfolded_odata, header_length));
+	}
 
 /* congestion control */
 	if (sock->use_pgmcc &&
@@ -2442,6 +2526,7 @@
 /* fall through silently on other errors */
 	}
 
+	{
 	const pgm_time_t now = pgm_time_update_now();
 
 	if (sock->use_pgmcc) {
@@ -2455,6 +2540,7 @@
 	sock->spm_heartbeat_state = 1;
 	sock->next_heartbeat_spm = now + sock->spm_heartbeat_interval[sock->spm_heartbeat_state++];
 	pgm_mutex_unlock (&sock->timer_mutex);
+	}
 
 	pgm_txw_inc_retransmit_count (skb);
 	sock->cumulative_stats[PGM_PC_SOURCE_SELECTIVE_BYTES_RETRANSMITTED] += ntohs(header->pgm_tsdu_length);
