--- net.c	2010-10-24 12:01:26.000000000 +0800
+++ net.c89.c	2010-10-24 12:50:15.000000000 +0800
@@ -62,6 +62,7 @@
 	pgm_assert( tolen > 0 );
 
 #ifdef NET_DEBUG
+	{
 	char saddr[INET_ADDRSTRLEN];
 	pgm_sockaddr_ntop (to, saddr, sizeof(saddr));
 	pgm_debug ("pgm_sendto (sock:%p use_rate_limit:%s use_router_alert:%s buf:%p len:%" PRIzu " to:%s [toport:%d] tolen:%d)",
@@ -69,12 +70,14 @@
 		use_rate_limit ? "TRUE" : "FALSE",
 		use_router_alert ? "TRUE" : "FALSE",
 		(const void*)buf,
-		len,
+		(unsigned long)len,
 		saddr,
 		ntohs (((const struct sockaddr_in*)to)->sin_port),
 		(int)tolen);
+	}
 #endif
 
+	{
 	const SOCKET send_sock = use_router_alert ? sock->send_with_router_alert_sock : sock->send_sock;
 
 	if (use_rate_limit && 
@@ -89,8 +92,9 @@
 	if (-1 != hops)
 		pgm_sockaddr_multicast_hops (send_sock, sock->send_gsr.gsr_group.ss_family, hops);
 
+	{
 	ssize_t sent = sendto (send_sock, buf, len, 0, to, (socklen_t)tolen);
-	pgm_debug ("sendto returned %" PRIzd, sent);
+	pgm_debug ("sendto returned %" PRIzd, (long)sent);
 	if (sent < 0) {
 		int save_errno = pgm_get_last_sock_error();
 		char errbuf[1024];
@@ -107,14 +111,14 @@
 			};
 			const int ready = poll (&p, 1, 500 /* ms */);
 #else
+			int ready;
 			fd_set writefds;
+			struct timeval tv;
 			FD_ZERO(&writefds);
 			FD_SET(send_sock, &writefds);
-			struct timeval tv = {
-				.tv_sec  = 0,
-				.tv_usec = 500 /* ms */ * 1000
-			};
-			const int ready = select (1, NULL, &writefds, NULL, &tv);
+			tv.tv_sec  = 0;
+			tv.tv_usec = 500 /* ms */ * 1000;
+			ready = select (1, NULL, &writefds, NULL, &tv);
 #endif /* CONFIG_HAVE_POLL */
 			if (ready > 0)
 			{
@@ -150,6 +154,8 @@
 	if (!use_router_alert && sock->can_send_data)
 		pgm_mutex_unlock (&sock->send_mutex);
 	return sent;
+	}
+	}
 }
 
 /* socket helper, for setting pipe ends non-blocking
