// Events / data from the IB API.
package ib.events;

option optimize_for = LITE_RUNTIME;

import "ib_common.proto";

// BidAsk is set up so that the listener
// for this event is required to care about
// for bid *and* ask.  This looks more like
// a union of bid and ask since at the most
// granular level, only one of the two is
// updated at a given point in time.
message BidAsk {
  required int64 time_stamp = 1;
  required int32 id = 2;

  optional group Bid = 3 {
    optional double price = 4;
    optional int32 size = 5;
  }

  optional group Ask = 6 {
    optional double price = 7;
    optional int32 size = 8;
  };
}

message OptionStats {
  required int64 time_stamp = 1;
  required int32 id = 2;
  optional double price = 3;
  optional double delta = 4;
  optional double gamma = 5;
  optional double vega = 6;
  optional double theta = 7;
  optional double impliedVol = 8;
}

message Bar {
  required int64 time_stamp = 1;
  required int32 id = 2;
  required double open = 3;
  required double high = 4;
  required double low = 5;
  required double close = 6;
  required double wap = 7;
  required int32 count = 8;  // # of samples in this interval
  optional ib.common.Interval interval = 9;
}
